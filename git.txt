git init  把这个目录变成Git可以管理的仓库
git add readme.txt 把文件添加到仓库
git commit -m "wrote a readme file" 把文件提交到仓库
git status 掌握仓库当前的状态
git diff readme.txt 查看difference
git log 显示从最近到最远的提交日志
git reset 版本回退
git checkout -- file可以丢弃工作区的修改（删除也是修改），只能恢复文件到最新版本
git rm用于删除一个文件
git remote add origin git@server-name:path/repo-name.git 关联一个远程库
git push -u origin master 第一次推送master分支的所有内容
git push origin master 推送最新修改





一般使用：
git clone 克隆，如 git clone git@github.com:michaelliao/gitskills.git

git checkout -b dev  创建dev分支，然后切换到dev分支
	相当于 git branch dev	git checkout dev
git branch 查看当前分支
git checkout master 切换回master分支
git merge dev  用于合并指定分支到当前分支 如把dev分支的工作成果合并到master分支上
git branch -d dev 删除dev分支


查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场


多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。


查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。



